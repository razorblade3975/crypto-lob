name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  clang-tidy:
    name: Clang-Tidy Analysis
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Add LLVM apt repository
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 17

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-17 \
          clang-tidy-17 \
          libc++-17-dev \
          libc++abi-17-dev \
          cmake \
          ninja-build \
          python3-pip
        
        pip3 install conan==2.0.17
        conan profile detect --force
    
    - name: Generate compile commands
      run: |
        conan install . --output-folder=build --build=missing \
          -s compiler=clang -s compiler.version=17 \
          -s compiler.libcxx=libc++ -s compiler.cppstd=20
        
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
              -DCMAKE_C_COMPILER=clang-17 \
              -DCMAKE_CXX_COMPILER=clang++-17 \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -G Ninja ..
    
    - name: Run clang-tidy
      run: |
        find src tests -name '*.cpp' -o -name '*.hpp' | \
          xargs clang-tidy-17 -p build/ \
            --config-file=.clang-tidy \
            --header-filter='.*' \
            --warnings-as-errors='*'

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-17 \
          libc++-17-dev \
          libc++abi-17-dev \
          cmake \
          ninja-build \
          lcov \
          python3-pip
        
        pip3 install conan==2.0.17
        conan profile detect --force
    
    - name: Build with coverage
      run: |
        conan install . --output-folder=build --build=missing \
          -s compiler=clang -s compiler.version=17 \
          -s compiler.libcxx=libc++ -s compiler.cppstd=20 \
          -s build_type=Debug
        
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
              -DCMAKE_C_COMPILER=clang-17 \
              -DCMAKE_CXX_COMPILER=clang++-17 \
              -DCMAKE_CXX_FLAGS="--coverage -fprofile-instr-generate -fcoverage-mapping" \
              -DCMAKE_EXE_LINKER_FLAGS="--coverage -fprofile-instr-generate -fcoverage-mapping" \
              -DBUILD_TESTS=ON \
              -G Ninja ..
        
        ninja -j$(nproc)
    
    - name: Run tests with coverage
      run: |
        cd build
        LLVM_PROFILE_FILE="crypto-lob-%p.profraw" ctest -V
        
        # Generate coverage report
        llvm-profdata-17 merge -sparse crypto-lob-*.profraw -o crypto-lob.profdata
        llvm-cov-17 report ./crypto-lob-tests -instr-profile=crypto-lob.profdata
        llvm-cov-17 show ./crypto-lob-tests -instr-profile=crypto-lob.profdata > coverage.txt
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./build/coverage.txt
        flags: unittests
        name: codecov-umbrella

  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-17 \
          python3-pip \
          lizard
    
    - name: Run complexity analysis
      run: |
        # Run lizard for cyclomatic complexity
        lizard src/ tests/ -l cpp -T cyclomatic_complexity=15 -T nloc=50 -T parameter_count=5
        
        # Generate report
        lizard src/ tests/ -l cpp --html > complexity_report.html
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-report
        path: complexity_report.html

  documentation:
    name: Documentation Check
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
    
    - name: Check documentation coverage
      run: |
        # Create basic Doxyfile if it doesn't exist
        if [ ! -f Doxyfile ]; then
          doxygen -g
          echo "INPUT = src/" >> Doxyfile
          echo "RECURSIVE = YES" >> Doxyfile
          echo "EXTRACT_ALL = YES" >> Doxyfile
          echo "GENERATE_HTML = YES" >> Doxyfile
          echo "GENERATE_LATEX = NO" >> Doxyfile
          echo "QUIET = YES" >> Doxyfile
          echo "WARNINGS = YES" >> Doxyfile
          echo "WARN_IF_UNDOCUMENTED = YES" >> Doxyfile
          echo "WARN_IF_DOC_ERROR = YES" >> Doxyfile
        fi
        
        # Run doxygen and check for warnings
        doxygen 2>&1 | tee doxygen.log
        
        # Fail if there are undocumented warnings (optional - can be made stricter later)
        if grep -q "warning:" doxygen.log; then
          echo "Documentation warnings found"
          cat doxygen.log
        fi