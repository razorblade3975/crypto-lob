name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast formatting check - runs first to fail fast
  format-check:
    name: Code Formatting
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y wget lsb-release gnupg
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 17
        sudo apt-get install -y clang-format-17
    
    - name: Check formatting
      run: |
        find src tests -name '*.cpp' -o -name '*.hpp' | xargs clang-format-17 --dry-run --Werror

  # Main build job with optimizations
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-22.04
    needs: format-check
    strategy:
      matrix:
        build_type: [Debug, Release]
        include:
          - build_type: Debug
            enable_sanitizers: "ON"
            conan_build_type: "Debug"
          - build_type: Release
            enable_sanitizers: "OFF"
            conan_build_type: "Release"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    
    - name: Build development container
      run: |
        docker compose build crypto-lob-dev
    
    - name: Build and test
      run: |
        docker compose run --rm crypto-lob-dev bash -c "
          cd /workspace && \
          echo 'ðŸ“¦ Installing Conan dependencies...' && \
          conan install . --output-folder=build --build=missing \
            -s compiler=clang -s compiler.version=17 \
            -s compiler.libcxx=libc++ -s compiler.cppstd=20 \
            -s build_type=${{ matrix.conan_build_type }} && \
          cd build && \
          echo 'ðŸ”¨ Configuring CMake...' && \
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DCMAKE_C_COMPILER=clang-17 \
                -DCMAKE_CXX_COMPILER=clang++-17 \
                -DBUILD_TESTS=ON \
                -DENABLE_SANITIZERS=${{ matrix.enable_sanitizers }} \
                -G Ninja .. && \
          echo 'âš¡ Building with Ninja...' && \
          ninja -j\$(nproc) && \
          echo 'ðŸ§ª Running ${{ matrix.build_type }} tests...' && \
          ctest -V --output-on-failure
        "
    
    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.build_type }}
        path: |
          build/Testing/
          *.log


  # Production container build (only on main branch)
  production-build:
    name: Production Build
    runs-on: ubuntu-22.04
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build production container
      run: |
        docker compose build crypto-lob-prod
    
    - name: Test production container startup
      run: |
        docker compose run --rm crypto-lob-prod /crypto-lob --version || echo "No version flag implemented yet"

