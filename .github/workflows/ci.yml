name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  docker-build-test:
    name: Docker Build, Test & Analyze
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build development container
      run: |
        docker compose build crypto-lob-dev
    
    # Code Quality Checks
    - name: Code formatting check
      run: |
        docker compose run --rm crypto-lob-dev bash -c "
          cd /workspace && \
          find src tests -name '*.cpp' -o -name '*.hpp' | xargs clang-format-17 --dry-run --Werror && \
          echo '‚úÖ Code formatting check passed'
        "
    
    - name: Static analysis with clang-tidy
      run: |
        docker compose run --rm crypto-lob-dev bash -c "
          cd /workspace && \
          # First install dependencies for clang-tidy
          conan install . --output-folder=build_tidy --build=missing \
            -s compiler=clang -s compiler.version=17 \
            -s compiler.libcxx=libc++ -s compiler.cppstd=20 && \
          cd build_tidy && \
          # Generate compile_commands.json
          cmake -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DCMAKE_C_COMPILER=clang-17 \
                -DCMAKE_CXX_COMPILER=clang++-17 \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                -G Ninja .. && \
          cd /workspace && \
          # Run clang-tidy
          find src tests -name '*.cpp' | \
          xargs clang-tidy-17 -p build_tidy/ \
                --config-file=.clang-tidy \
                --header-filter='.*' || \
          echo '‚ö†Ô∏è  Clang-tidy warnings found (non-blocking for now)'
        "
    
    # Debug Build with Sanitizers
    - name: Build and test (Debug with sanitizers)
      run: |
        docker compose run --rm crypto-lob-dev bash -c "
          cd /workspace && \
          conan install . --output-folder=build_debug --build=missing \
            -s compiler=clang -s compiler.version=17 \
            -s compiler.libcxx=libc++ -s compiler.cppstd=20 \
            -s build_type=Debug && \
          cd build_debug && \
          cmake -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DCMAKE_C_COMPILER=clang-17 \
                -DCMAKE_CXX_COMPILER=clang++-17 \
                -DBUILD_TESTS=ON \
                -DENABLE_SANITIZERS=ON \
                -G Ninja .. && \
          ninja -j\$(nproc) && \
          echo 'üß™ Running Debug tests with sanitizers...' && \
          ctest -V --output-on-failure
        "
    
    # Release Build
    - name: Build and test (Release)
      run: |
        docker compose run --rm crypto-lob-dev bash -c "
          cd /workspace && \
          conan install . --output-folder=build --build=missing \
            -s compiler=clang -s compiler.version=17 \
            -s compiler.libcxx=libc++ -s compiler.cppstd=20 && \
          cd build && \
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
                -DCMAKE_C_COMPILER=clang-17 \
                -DCMAKE_CXX_COMPILER=clang++-17 \
                -DBUILD_TESTS=ON \
                -G Ninja .. && \
          ninja -j\$(nproc) && \
          echo 'üöÄ Running Release tests...' && \
          ctest -V --output-on-failure
        "
    
    # Production Container Build
    - name: Build production container
      run: |
        docker compose build crypto-lob-prod
    
    - name: Test production container startup
      run: |
        docker compose run --rm crypto-lob-prod /crypto-lob --version || echo "No version flag implemented yet"
    
    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          build*/Testing/
          *.log

